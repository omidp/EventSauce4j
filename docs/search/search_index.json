{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to EventSauce4j","text":"<p><code>eventsauce4j</code> is a lightweight event sourcing toolkit for Java + Spring Framework, inspired by EventSauce (PHP). It provides clean building blocks for domain events, message repositories, dispatching, outbox, with a persistence module.</p> <p>If you know EventSauce in PHP, you should feel at home: the vocabulary, responsibilities, and flow are intentionally adapted to Java idioms.</p>"},{"location":"#why-eventsauce4j","title":"Why EventSauce4j?","text":"<p>Event sourcing is a powerful architectural pattern, but many existing libraries are large, opinionated, or hard to integrate with. The goals of eventsauce4j are:</p> <ul> <li>Minimal footprint, easy to embed in Spring / Spring Boot</li> <li>Pluggable persistence / transport / serialization</li> <li>A pragmatic event sourcing library for Spring framework with a focus on developer experience.</li> </ul>"},{"location":"#modules","title":"Modules","text":"Module Description eventsauce4j-core Synchronous implementation of the message dispatcher and core event sourcing components. eventsauce4j-jpa JPA-based implementation of the Outbox pattern for reliable event persistence and publication. eventsauce4j-rabbitmq RabbitMQ producer and consumer support for inter-service event communication. eventsauce4j-jackson JSON event serialization and deserialization using Jackson."},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#modules-in-this-guide","title":"Modules in this guide","text":"<p><code>eventsauce4j-jpa-starter</code> : JPA outbox + synchronous dispatch</p> <p><code>eventsauce4j-rabbitmq-starter</code> : RabbitMQ producer/consumer integration</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 17+</li> <li>Spring Boot (recommended)</li> <li>Maven</li> <li>(For RabbitMQ starter) a running RabbitMQ broker</li> </ul>"},{"location":"getting-started/#1-jpa-starter","title":"1) JPA Starter","text":""},{"location":"getting-started/#11-add-the-dependency","title":"1.1 Add the dependency","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;io.eventsauce4j&lt;/groupId&gt;\n  &lt;artifactId&gt;eventsauce4j-jpa-starter&lt;/artifactId&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/#12-enable-the-starter","title":"1.2 Enable the starter","text":"<pre><code>import io.eventsauce4j.starter.jpa.EnableJpaEventSauce4j;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@EnableJpaEventSauce4j\npublic class Config {\n\n  @Bean\n  Inflector inflection() {\n    return new ChainInflector(List.of(\n      new ExternalInflector(\"io.eventsauce4j.example.domain.event.external\"),\n      new AnnotationInflector(UserCreated.class.getPackageName()),\n      new StaticInflector(Map.of(\n        EmailSent.class.getName(), EmailSent.class\n      ))\n    ));\n  }\n}\n</code></pre>"},{"location":"getting-started/#2-rabbitmq-starter","title":"2) RabbitMQ Starter","text":""},{"location":"getting-started/#21-add-the-dependency","title":"2.1 Add the dependency","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;io.eventsauce4j&lt;/groupId&gt;\n    &lt;artifactId&gt;eventsauce4j-rabbitmq-starter&lt;/artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/#22-enable-the-starter","title":"2.2 Enable the starter","text":"<pre><code>import io.eventsauce4j.starter.rabbitmq.EnableRabbitMqEventSauce4j;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@EnableRabbitMqEventSauce4j\npublic class Config {\n\n  @Bean\n  Inflector inflection() {\n    return new ChainInflector(List.of(\n      new ExternalInflector(\"io.eventsauce4j.example.domain.event.external\"),\n      new AnnotationInflector(UserCreated.class.getPackageName()),\n      new StaticInflector(Map.of(\n        EmailSent.class.getName(), EmailSent.class\n      ))\n    ));\n  }\n}\n</code></pre>"},{"location":"getting-started/#3-start-rabbitmq-for-rabbitmq-starter","title":"3) Start RabbitMQ (for RabbitMQ starter)","text":"<p>Run a local broker with Docker:</p> <pre><code>docker run -d --name rabbitmq \\\n  -p 5672:5672 -p 15672:15672 \\\n  -e RABBITMQ_DEFAULT_USER=guest \\\n  -e RABBITMQ_DEFAULT_PASS=guest \\\n  rabbitmq:3.13-management\n</code></pre> <p>Management UI: http://localhost:15672 (user/pass guest).</p>"},{"location":"getting-started/#4-configuration","title":"4) Configuration","text":"<p>RabbitMQ settings (application.yml)</p> <pre><code>eventsauce4j:\n  rabbitmq:\n    host: localhost\n    port: 5672\n    username: guest\n    password: guest\n    exchange: eventsauce4j.exchange\n    routingKey: eventsauce4j.key\n</code></pre>"},{"location":"getting-started/#outbox-settings","title":"Outbox settings","text":"<p>Use Spring properties to tune outbox publishing:</p> <p><code>eventsauce4j.outbox.delayInterval</code> : delay between outbox publish cycles</p> <p><code>eventsauce4j.outbox.lockName</code> : lock name to isolate publishers per service</p> <p>Example:</p> <pre><code>eventsauce4j:\n  outbox:\n    delayInterval: 5 #seconds\n    lockName: user-service-outbox-lock\n</code></pre>"},{"location":"getting-started/#working-example","title":"Working Example","text":"<p>See eventsauce4j-example: two Spring Boot services (user-service and payment-service) demonstrating JPA outbox + RabbitMQ messaging and shared event mappings.</p>"}]}